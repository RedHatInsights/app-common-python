---
name: "python tests+artifacts+release"

on:
  pull_request:
  push:
    branches:
      - master
    tags:
      - "v*"
  release:
    types: [published]

permissions:
  contents: read

jobs:
  dist:
    runs-on: ubuntu-latest
    name: Build Python sdist/wheel
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.9"
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade wheel setuptools build
      - name: Build package
        run: python -m build -o dist/
      - uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 5

  test:
    runs-on: ubuntu-latest
    needs: [dist]
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -U setuptools setuptools_scm pytest
      - uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist
      - name: Install package
        run: |
          WHEEL_FILE=$(ls dist/*.whl | head -n 1)
          pip install "$WHEEL_FILE"
      - name: Run pytest
        env:
          ACG_CONFIG: test.json
        run: pytest

  dist_check:
    runs-on: ubuntu-latest
    needs: [dist]
    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: "3.9"
      - uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist
      - name: Check distribution
        run: |
          python -m pip install --upgrade pip
          pip install twine
          twine check --strict dist/*

  dist_upload:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'release' }}
    needs: [dist_check, test]
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist
      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.pypi_token }}
